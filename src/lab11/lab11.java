package lab11;

import com.sun.jdi.Bootstrap;
import com.sun.jdi.Location;
import com.sun.jdi.VirtualMachine;
import com.sun.jdi.connect.Connector;
import com.sun.jdi.connect.IllegalConnectorArgumentsException;
import com.sun.jdi.connect.LaunchingConnector;
import com.sun.jdi.connect.VMStartException;
import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.Map;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JTextArea;
import javax.swing.JViewport;

class myClass {
    Class c;
    com.sun.jdi.Method[] ma;
    Location[] la;
    int line0;

    myClass(Class c, com.sun.jdi.Method[] ma, int line0) {
        this.c = c;
        this.ma = ma;
        la = new Location[ma.length];
        this.line0 = line0;
    }
}

public class lab11 extends javax.swing.JFrame {

    public lab11() {
        initComponents();
        JViewport jvp = new JViewport();
        jvp.add(executions);
        jScrollPane2.setRowHeader(jvp);
        executions.setBackground(Color.gray);
    }
    
    public void viewportOut(JTextArea jvp, int line0, int[] in){
        String out = "";
        for(int j = 0; j < line0; j++){
            out = out.concat("\n");
        }
        for(int i : in){
            out = out.concat(Integer.toString(i));
            out = out.concat("\n");
        }
        jvp.setText(out);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        open = new javax.swing.JButton();
        close = new javax.swing.JButton();
        run = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        classList = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        outline = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jToolBar1.setRollover(true);

        open.setText("open");
        open.setFocusable(false);
        open.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        open.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openActionPerformed(evt);
            }
        });
        jToolBar1.add(open);

        close.setText("close");
        close.setFocusable(false);
        close.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        close.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeActionPerformed(evt);
            }
        });
        jToolBar1.add(close);

        run.setText("run");
        run.setFocusable(false);
        run.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        run.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        run.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runActionPerformed(evt);
            }
        });
        jToolBar1.add(run);

        jSplitPane1.setDividerLocation(400);

        classList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                classListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(classList);

        jSplitPane1.setLeftComponent(jScrollPane1);

        outline.setColumns(20);
        outline.setRows(5);
        jScrollPane2.setViewportView(outline);

        jSplitPane1.setRightComponent(jScrollPane2);

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 548, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    File f = null;
    String packageName;
    String cName;
    JFileChooser jfc = new JFileChooser(".");
    Vector<Class> classArray = new Vector<Class>();
    Vector<Method[]> methodArrays = new Vector<Method[]>();
    JTextArea executions = new JTextArea("");
    
    
    LaunchingConnector lc = Bootstrap.virtualMachineManager().defaultConnector();
    Map map = lc.defaultArguments();
    Connector.Argument ca = (Connector.Argument) map.get("main");

    private void openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openActionPerformed
        Class[] temp = {};
        classList.setListData(temp);
        classArray.clear();

        jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        jfc.setAcceptAllFileFilterUsed(false);
        int returnval = jfc.showOpenDialog(this);
        if (returnval == JFileChooser.APPROVE_OPTION) {
            f = jfc.getSelectedFile();
        }
//        System.out.println(f.getAbsolutePath());

        FilenameFilter filter = new FilenameFilter() {
            public boolean accept(File dir, String name) {
                String lowercaseName = name.toLowerCase();
                return lowercaseName.endsWith(".class");
            }
        };

        File[] listFiles = f.listFiles(filter);
        // package name
        String pathName = f.getAbsolutePath();
        
        // windows:
        packageName = pathName.substring(pathName.lastIndexOf("\\") + 1, pathName.length());
        // linux:
//        String packageName = pathName.substring(pathName.lastIndexOf("/") + 1, pathName.length());

        try {

            for (File listFile : listFiles) {
                URL url = f.getParentFile().toURI().toURL();
                URL[] uarray = {url};
                URLClassLoader cloader = new URLClassLoader(uarray);
                String className = listFile.getName().substring(0, listFile.getName().length() - 6);
                cName = packageName + "." + className;
//                System.out.println(className);
                classArray.add(Class.forName(cName, true, cloader));
            }

            classList.setListData(classArray);
            
        } catch (ClassNotFoundException ex) {
            System.out.println(ex);
        } catch (MalformedURLException ex) {
            System.out.println(ex);
        }
    }//GEN-LAST:event_openActionPerformed

    private void closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeActionPerformed
        Class[] temp = {};
        int[] tmp = {};
        classList.setListData(temp);
        outline.setText("");
        viewportOut(executions, 0, tmp);
    }//GEN-LAST:event_closeActionPerformed

    private void runActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runActionPerformed
        try {
            ca.setValue("-cp \"" + f.getParentFile() + "\" " + classList.getSelectedValue().getName());
            VirtualMachine vm = lc.launch(map);
            Process process = vm.process();
            vm.setDebugTraceMode(VirtualMachine.TRACE_NONE);
            displayRemoteOutput(process.getInputStream());
            MyThread mt = new MyThread(vm, false, f.getName(), classArray.size());
            
            
        } catch (IOException ex) {
            Logger.getLogger(lab11.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalConnectorArgumentsException ex) {
            Logger.getLogger(lab11.class.getName()).log(Level.SEVERE, null, ex);
        } catch (VMStartException ex) {
            Logger.getLogger(lab11.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }//GEN-LAST:event_runActionPerformed

    private void classListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_classListValueChanged

        // skeleton
        outline.setText("");
        try {
            outline.setText(Util.skel(classList.getSelectedValue()));
        } catch (ClassNotFoundException | IllegalAccessException | IllegalArgumentException | InvocationTargetException | InstantiationException | NoSuchMethodException ex) {
            Logger.getLogger(lab11.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        // execution counts
        viewportOut(executions, 4, new int[]{1, 2, 3});
    }//GEN-LAST:event_classListValueChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(lab11.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(lab11.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(lab11.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(lab11.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new lab11().setVisible(true);
            }
        });
    }

    private void displayRemoteOutput(final InputStream stream) {
        Thread thr = new Thread("output reader") {
            public void run() {
                BufferedReader in = new BufferedReader(new InputStreamReader(stream));
                int i;
                try {
                    while ((i = in.read()) != -1) {
                        System.out.print((char) i); // Print out standard output
                    }
                } catch (IOException ex) {
                    System.out.println("Failed reading output");
                }
            }
        };
        thr.setPriority(Thread.MAX_PRIORITY - 1);
        thr.start();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<Class> classList;
    private javax.swing.JButton close;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton open;
    private javax.swing.JTextArea outline;
    private javax.swing.JButton run;
    // End of variables declaration//GEN-END:variables
}
